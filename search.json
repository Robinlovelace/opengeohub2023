[
  {
    "objectID": "osm-slides.html#session-overview",
    "href": "osm-slides.html#session-overview",
    "title": "Tidy geographic data",
    "section": "Session overview",
    "text": "Session overview\n\nSource: pretalx.earthmonitor.org/opengeohub-summer-school-2023/schedule/v/0.7/"
  },
  {
    "objectID": "osm-slides.html#system-dependencies",
    "href": "osm-slides.html#system-dependencies",
    "title": "Tidy geographic data",
    "section": "System dependencies",
    "text": "System dependencies\n\nSource: Pebesma (2018)"
  },
  {
    "objectID": "osm-slides.html#development-environments",
    "href": "osm-slides.html#development-environments",
    "title": "Tidy geographic data",
    "section": "Development environments",
    "text": "Development environments"
  },
  {
    "objectID": "osm-slides.html#rstudio",
    "href": "osm-slides.html#rstudio",
    "title": "Tidy geographic data",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "osm-slides.html#vs-code",
    "href": "osm-slides.html#vs-code",
    "title": "Tidy geographic data",
    "section": "VS Code",
    "text": "VS Code"
  },
  {
    "objectID": "osm-slides.html#key-features-of-sf",
    "href": "osm-slides.html#key-features-of-sf",
    "title": "Tidy geographic data",
    "section": "Key features of sf",
    "text": "Key features of sf\n\nSource: Lovelace, Nowosad, and Muenchow (2019)"
  },
  {
    "objectID": "osm-slides.html#sf-functions",
    "href": "osm-slides.html#sf-functions",
    "title": "Tidy geographic data",
    "section": "sf functions",
    "text": "sf functions\n\nSource: Pebesma (2018)"
  },
  {
    "objectID": "osm-slides.html#sf-dplyr-workflow",
    "href": "osm-slides.html#sf-dplyr-workflow",
    "title": "Tidy geographic data",
    "section": "sf + dplyr workflow",
    "text": "sf + dplyr workflow\nMermaid graph:\ngraph LR\n  A[Read data] --&gt; B[Transform data]\n  B --&gt; C[Visualize data]"
  },
  {
    "objectID": "osm-slides.html#practical-1330-1430",
    "href": "osm-slides.html#practical-1330-1430",
    "title": "Tidy geographic data",
    "section": "Practical (~13:30-14:30)",
    "text": "Practical (~13:30-14:30)\nWork through the code at ogh23.robinlovelace.net/tidy and answer the questions at your own pace.\n\nremotes::install_cran(pkgs)\n\n\n# The packages we'll use\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"geos\",\n    \"data.table\",\n    \"spData\"\n)\nsapply(pkgs, require, character.only = TRUE)\n\n        sf  tidyverse       geos data.table     spData \n      TRUE       TRUE       TRUE       TRUE       TRUE"
  },
  {
    "objectID": "osm-slides.html#tidyverse-alternatives",
    "href": "osm-slides.html#tidyverse-alternatives",
    "title": "Tidy geographic data",
    "section": "tidyverse alternatives",
    "text": "tidyverse alternatives\n…"
  },
  {
    "objectID": "osm-slides.html#geos",
    "href": "osm-slides.html#geos",
    "title": "Tidy geographic data",
    "section": "geos",
    "text": "geos\n…"
  },
  {
    "objectID": "tidy-slides.html#session-overview",
    "href": "tidy-slides.html#session-overview",
    "title": "Tidy geographic data",
    "section": "Session overview",
    "text": "Session overview\n\nSource: pretalx.earthmonitor.org/opengeohub-summer-school-2023/schedule/v/0.7/\n\nParallel to the Python session."
  },
  {
    "objectID": "tidy-slides.html#system-dependencies",
    "href": "tidy-slides.html#system-dependencies",
    "title": "Tidy geographic data",
    "section": "System dependencies",
    "text": "System dependencies\n\nSource: Pebesma (2018)\n\nSystem dependencies."
  },
  {
    "objectID": "tidy-slides.html#system-dependencies-code",
    "href": "tidy-slides.html#system-dependencies-code",
    "title": "Tidy geographic data",
    "section": "System dependencies: code",
    "text": "System dependencies: code\n\nsf startup message:\n\n\nsf::sf_extSoftVersion()\n\n          GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H \n      \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\" \n          PROJ \n       \"8.2.1\" \n\n\n\nOn Linux sf uses system installations of GDAL, GEOS and PROJ.4:\n\n\ngdalinfo --version\nwhich gdal-config\n\nGDAL 3.4.1, released 2021/12/27\n/usr/bin/gdal-config\n\n\n\nOn Windows, sf ships with binary versions installed"
  },
  {
    "objectID": "tidy-slides.html#development-environments",
    "href": "tidy-slides.html#development-environments",
    "title": "Tidy geographic data",
    "section": "Development environments",
    "text": "Development environments\n\n\nRStudio\n\nPro: works out of the box\nPro: Great R autocomplete\nPro: Features for data science + R package development\nCon: A bit R specific\n\nVS Code\n\nPro: Works with many languages\nPro: Unbeatable ecosystem of extensions\nPro: Advanced features such as copilot + works in Codespaces\nCon: A bit fiddly to set up, rough edges when using R"
  },
  {
    "objectID": "tidy-slides.html#rstudio-1",
    "href": "tidy-slides.html#rstudio-1",
    "title": "Tidy geographic data",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "tidy-slides.html#vs-code-1",
    "href": "tidy-slides.html#vs-code-1",
    "title": "Tidy geographic data",
    "section": "VS Code",
    "text": "VS Code"
  },
  {
    "objectID": "tidy-slides.html#results",
    "href": "tidy-slides.html#results",
    "title": "Tidy geographic data",
    "section": "Results",
    "text": "Results\n\n\n\nOn Twitter:\n\n\n\n\n\nOn Mastodon:"
  },
  {
    "objectID": "tidy-slides.html#on-mattermost",
    "href": "tidy-slides.html#on-mattermost",
    "title": "Tidy geographic data",
    "section": "On Mattermost",
    "text": "On Mattermost"
  },
  {
    "objectID": "tidy-slides.html#key-features-of-sf",
    "href": "tidy-slides.html#key-features-of-sf",
    "title": "Tidy geographic data",
    "section": "Key features of sf",
    "text": "Key features of sf\n\nSource: Lovelace, Nowosad, and Muenchow (2019)"
  },
  {
    "objectID": "tidy-slides.html#sf-functions",
    "href": "tidy-slides.html#sf-functions",
    "title": "Tidy geographic data",
    "section": "sf functions",
    "text": "sf functions\n\nSource: Pebesma (2018)"
  },
  {
    "objectID": "tidy-slides.html#practical-1330-1430",
    "href": "tidy-slides.html#practical-1330-1430",
    "title": "Tidy geographic data",
    "section": "Practical (~13:30-14:30)",
    "text": "Practical (~13:30-14:30)\nWork through the code at ogh23.robinlovelace.net/tidy and answer the questions at your own pace.\n\nremotes::install_cran(pkgs)\n\n\n# The packages we'll use\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"geos\",\n    \"data.table\",\n    \"spData\"\n)\nsapply(pkgs, require, character.only = TRUE)\n\n        sf  tidyverse       geos data.table     spData \n      TRUE       TRUE       TRUE       TRUE       TRUE"
  },
  {
    "objectID": "tidy-slides.html#tidyverse-alternatives",
    "href": "tidy-slides.html#tidyverse-alternatives",
    "title": "Tidy geographic data",
    "section": "tidyverse alternatives",
    "text": "tidyverse alternatives\n…"
  },
  {
    "objectID": "tidy-slides.html#geos",
    "href": "tidy-slides.html#geos",
    "title": "Tidy geographic data",
    "section": "geos",
    "text": "geos\n…"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OpenGeoHub Summer School 2023",
    "section": "",
    "text": "Quarto Publish\nThis repo contains code to support sessions that I will deliver for the OpenGeoHub Summer School 2023.\nAs shown in the course schedule I will deliver the following sessions:\nAbstracts for these sessions are provided below."
  },
  {
    "objectID": "index.html#tidy-geographic-data-with-sf-dplyr-ggplot2-geos-and-friends",
    "href": "index.html#tidy-geographic-data-with-sf-dplyr-ggplot2-geos-and-friends",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Tidy geographic data with sf, dplyr, ggplot2, geos and friends",
    "text": "Tidy geographic data with sf, dplyr, ggplot2, geos and friends\n\nThis lecture will provide an introduction to working with geographic data using R in a ‘tidy’ way. It will focus on using the sf package to read, write, manipulate, and plot geographic data in combination with the tidyverse metapackage. Why use the sf package with the tidyverse? The lecture will outline some of the ideas underlying the tidyverse and how they can speed-up data analysis pipelines, while making data analysis code easier to read and write. We will see how the following lines\nlibrary(sf)\nlibrary(tidyverse)\ncan provide a foundation on which the many geographic data analysis problems can be solved. The lecture will also cover on more recently developed packages that integrate with the tidyverse to a greater and lesser extent. We will look at how the geos package, which provides a simple and high-performance interface to the GEOS library for performing geometric operations on geographic data, integrates with the tidyverse. The tidyverse is not the right tool for every data analysis task and we touch on alternatives for working with raster data, with reference to the terra package, and alternative frameworks such as data.table. Finally, we will also look at how the ‘tidy’ philosophy could be implemented in other programming languages, such as Python.\nThe focus throughout will be on practical skills and using packages effectively within the wider context of project management tools, integrated development environments (we recommend VS Code with appropriate extensions or RStudio), and version control systems."
  },
  {
    "objectID": "index.html#processing-large-openstreetmap-datasets-for-geocomputation",
    "href": "index.html#processing-large-openstreetmap-datasets-for-geocomputation",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Processing large OpenStreetMap datasets for geocomputation",
    "text": "Processing large OpenStreetMap datasets for geocomputation\nOpenStreetMap (OSM) is a free and openly editable map of the world. Like Wikipedia and unlike government or corperation maintained datasets, OSM is created and maintained by a community of volunteers, making it the premier decentralized and fastest evolving source of geographic vector data focussed on features relevant to human activity (e.g. roads, buildings, cafes) on planet Earth. Unlike Wikipedia, every data point in OSM has a geographic location and attributes must be structured as key-value pairs. OSM is a rich source of data for geocomputation, but the decentralized nature of the project and the sheer volume of data. ‘Planet.osm’ now has more nodes than there are people on Earth, with more than 8 billion nodes, and the rate of data creation is increasing as the community grows, to 10 million users in early 2023. The size and rapid evolution of OSM are great strengths, democratising geographic knowledge and ensuring resilience. However, these features can make it difficult to work with OSM data.\nThis lecture will provide an introduction to working with OSM and will cover the following:\n\nHow and where to download OSM data\nHow to process small amounts of OSM data using the osmdata R package\nHow to process large OSM ‘extracts’ data with the osmextract R package\nOther command line tools for working with OSM data, including the mature and widely used osmium tool, the pyrosm Python package and the osm2streets web application and Rust codebase\n\nFinally, the lecture will outline ideas for using OSM data. It will conclude with a call to action, inspiring the use of this rich resource to support policy objectives such as the fast and fair decarbonisation of the global economy as societies transition away from inefficient, polluting and costly fossil fuels."
  },
  {
    "objectID": "index.html#reproducibility",
    "href": "index.html#reproducibility",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Reproducibility",
    "text": "Reproducibility\nTo install the dependencies for this repo, run the following command:\nremotes::install_github(\"robinlovelace/opengeohub2023\")\nThis repo also uses the renv package to manage dependencies. We saved the dependencies with the following command:\n\nrenv::snapshot()\n\nCode was generated from the .qmd files using the following commands:\n\nf = c(\"tidy.qmd\", \"osm.qmd\")\nf_r = gsub(\".qmd\", \".R\", f)\nfor(i in seq_along(f)) {\n  knitr::purl(f[i], f_r[i])\n}\n\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nThe content below was rendered from README.qmd in the robinlovelace/opengeohub23 GitHub repository where you can find the source code for this website."
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Tidy geographic data",
    "section": "",
    "text": "These materials were created for the OpenGeoHub Summer School 2023.\nThey can be used with reference to the accompanying slides, available at ogh23.robinlovelace.net/opengeohub2023.\nSee the parent repo and session description in the agenda for context."
  },
  {
    "objectID": "tidy.html#pipes",
    "href": "tidy.html#pipes",
    "title": "Tidy geographic data",
    "section": "3.1 Pipes",
    "text": "3.1 Pipes\nA characteristic feature of the tidyverse is the use of the pipe operator. You can use R’s new native pipe operator (|&gt;), first available in R 4.1.0, or the magrittr pipe operator (%&gt;%). The pipe operator is used to chain together functions, making it easier to read and write code. It can be particularly useful when used in combination with RStudio’s intellisense feature, which provides suggestions for column names as you type. Try typing the following in RStudio and hitting Tab with the curso located between the brackets on the final line to see this in action. It will allow you to select the variable you’re interested in without quote marks, using a feature called non-standard evaluation (NSE) (Wickham 2019).\n\ncountries_df |&gt;\n  filter()"
  },
  {
    "objectID": "tidy.html#reading-and-writing-geographic-data",
    "href": "tidy.html#reading-and-writing-geographic-data",
    "title": "Tidy geographic data",
    "section": "3.2 Reading and writing geographic data",
    "text": "3.2 Reading and writing geographic data\nYou can read and write a wide range of vector geographic data with sf. Save the countries object to a file called countries.geojson and inspect the result.\n\nsf::write_sf(countries, \"countries.geojson\", delete_dsn = TRUE)\n\nYou can read the file in again with read_sf() (which returns a ‘tidyverse compliant’ tibble data frame) or st_read(), as shown below.\n\ncountries_new1 = sf::read_sf(\"countries.geojson\")\ncountries_new2 = sf::st_read(\"countries.geojson\")\n\nReading layer `countries' from data source \n  `/home/runner/work/opengeohub2023/opengeohub2023/countries.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 4 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 12.24011 ymin: 47.75843 xmax: 26.58828 ymax: 56.37253\nGeodetic CRS:  WGS 84\n\n\nFor most purposes the two representations are the same, although the ‘tibble’ version’s print outpout is slightly different.\n\ncountries_new1 |&gt;\n  head(2)\n\nSimple feature collection with 2 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 14.07452 ymin: 49.0274 xmax: 26.58828 ymax: 56.37253\nGeodetic CRS:  WGS 84\n# A tibble: 2 × 11\n  iso_a2 name_long continent region_un subregion   type  area_km2    pop lifeExp\n  &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 PL     Poland    Europe    Europe    Eastern Eu… Sove…  310402. 3.80e7    77.6\n2 LT     Lithuania Europe    Europe    Northern E… Sove…   63831. 2.93e6    74.5\n# ℹ 2 more variables: gdpPercap &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\ncountries_new2 |&gt;\n  head(2)\n\nSimple feature collection with 2 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 14.07452 ymin: 49.0274 xmax: 26.58828 ymax: 56.37253\nGeodetic CRS:  WGS 84\n  iso_a2 name_long continent region_un       subregion              type\n1     PL    Poland    Europe    Europe  Eastern Europe Sovereign country\n2     LT Lithuania    Europe    Europe Northern Europe Sovereign country\n   area_km2      pop  lifeExp gdpPercap                       geometry\n1 310402.33 38011735 77.60244  24347.07 MULTIPOLYGON (((23.48413 53...\n2  63831.09  2932367 74.51707  26258.21 MULTIPOLYGON (((26.49433 55...\n\n\nA nice function to explore the differences between the two objects is waldo::compare(). It shows that, other than their classes, the two objects are identical:\n\nwaldo::compare(countries_new1, countries_new2)\n\n`class(old)`: \"sf\" \"tbl_df\" \"tbl\" \"data.frame\"\n`class(new)`: \"sf\"                \"data.frame\"\n\n\nSee the full list of file formats that you can read and write with sf with the following commands:\n\ndrvs = sf::st_drivers() |&gt;\n  as_tibble()\nhead(drvs)\n\n# A tibble: 6 × 7\n  name   long_name                       write copy  is_raster is_vector vsi  \n  &lt;chr&gt;  &lt;chr&gt;                           &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;     &lt;lgl&gt;     &lt;lgl&gt;\n1 ESRIC  Esri Compact Cache              FALSE FALSE TRUE      TRUE      TRUE \n2 FITS   Flexible Image Transport System TRUE  FALSE TRUE      TRUE      FALSE\n3 PCIDSK PCIDSK Database File            TRUE  FALSE TRUE      TRUE      TRUE \n4 netCDF Network Common Data Format      TRUE  TRUE  TRUE      TRUE      TRUE \n5 PDS4   NASA Planetary Data System 4    TRUE  TRUE  TRUE      TRUE      TRUE \n6 VICAR  MIPL VICAR file                 TRUE  TRUE  TRUE      TRUE      TRUE"
  },
  {
    "objectID": "tidy.html#exercises",
    "href": "tidy.html#exercises",
    "title": "Tidy geographic data",
    "section": "3.3 Exercises",
    "text": "3.3 Exercises\n\nRe-create the country_centroids object, using world_centroids and poland and inputs, but this time using base R syntax with the [ operator.\n\nBonus: use the bench::mark() function to compare the performance of the base R and tidyverse implementation\nOpen question: Is this a good thing to benchmark? Why or why not?\n\n\n\nInspect the full list of drivers, e.g. with the command View(drvs).\n\nWhich formats are you likely to use and why?\nBonus: take a look at Chapter 8 of Geocomputation with R for more on reading and writing geographic (including raster) data with R."
  },
  {
    "objectID": "tidy.html#exercises-1",
    "href": "tidy.html#exercises-1",
    "title": "Tidy geographic data",
    "section": "4.1 Exercises",
    "text": "4.1 Exercises\n\nCreate a new data frame called countries_modified2 that contains the name, population and area of countries with a population density of more than 100 people per km2, sorted by area in descending order.\nDo the same with base R functions and the [ operator.\n\nWhat are the pros and cons of each?\nWhich do you prefer?"
  },
  {
    "objectID": "tidy.html#exercises-2",
    "href": "tidy.html#exercises-2",
    "title": "Tidy geographic data",
    "section": "5.1 Exercises",
    "text": "5.1 Exercises\n\nWith reference to the documentation at ggplot2.tidyverse.org/index.html, modify the code above to create a map with a title, legend and a different color palette.\nWith reference to paleolimbot.github.io/ggspatial/, add annotations including scale bar, north arrow and a text label to the map.\nBonus: try map making with tmap and test out the interactive mode (set with tmap_mode(\"interactive\")).”\nBonus: try reproducing maps presented in Chapter 9 of Geocomputation with R with ggplot2 and ggspatial. Which mapping framework do you prefer and why?\nIf you use raster data, take a look at the tidyterra documentation."
  },
  {
    "objectID": "tidy.html#exercises-3",
    "href": "tidy.html#exercises-3",
    "title": "Tidy geographic data",
    "section": "7.1 Exercises",
    "text": "7.1 Exercises\n\nBenchmark the union operation in geos and sf with the bench::mark() function.\n\nWhich is faster?\nWhich is easier to use?\nWhich do you prefer?"
  },
  {
    "objectID": "tidy.html#tidypolars",
    "href": "tidy.html#tidypolars",
    "title": "Tidy geographic data",
    "section": "8.1 tidypolars",
    "text": "8.1 tidypolars\nIf you want to give this package a spin, run the following command:\n\ninstall.packages(\n  'tidypolars', \n  repos = c('https://etiennebacher.r-universe.dev/bin/linux/jammy/4.3', getOption(\"repos\"))\n)"
  },
  {
    "objectID": "tidy.html#rsgeo",
    "href": "tidy.html#rsgeo",
    "title": "Tidy geographic data",
    "section": "8.2 rsgeo",
    "text": "8.2 rsgeo\nA work in progress is the rsgeo package, which aims to provide an seamless interface between R and the geo Rust crate. This could open the possiblity of calling other high-performance Rust libraries from R, although the package is at an early stage of development and probably not ready for production use.\nWe can check the installation works as follows:\n\ninstall.packages('rsgeo', repos = c('https://josiahparry.r-universe.dev', 'https://cloud.r-project.org'))\n\n\nlibrary(rsgeo)\n\nWarning: Can't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\n\n\n\nAttaching package: 'rsgeo'\n\n\nThe following object is masked from 'package:dplyr':\n\n    contains\n\n\nThe following object is masked from 'package:tidyr':\n\n    contains\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    geom_point, geom_polygon\n\n\nThe following object is masked from 'package:base':\n\n    within\n\ncountries_rs  = as_rsgeom(sf::st_geometry(countries))\ncountries_rs\n\n&lt;rs_MULTIPOLYGON[4]&gt;\n[1] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 23.4841276384498...\n[2] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 26.4943314958837...\n[3] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 22.5581376482117...\n[4] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 15.0169958838586...\n\nbench::mark(check = FALSE,\n  sf = sf::st_union(countries),\n  geos = geos::geos_make_collection(geos::geos_unary_union(countries_geos)),\n  rsgeo = rsgeo::union_geoms(countries_rs)\n)\n\n# A tibble: 3 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 sf           7.17ms   7.54ms      132.     121KB     2.07\n2 geos         66.6µs   94.8µs    10482.        0B     6.82\n3 rsgeo       357.8µs 464.81µs     2175.        0B     0"
  },
  {
    "objectID": "osm.html",
    "href": "osm.html",
    "title": "Processing large OpenStreetMap datasets for research",
    "section": "",
    "text": "TBC."
  }
]