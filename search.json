[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "opengeohub23",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "osm.html",
    "href": "osm.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Tidy geographic data",
    "section": "",
    "text": "These materials were created for the OpenGeoHub Summer School 2023.\nSee the parent repo and session description in the agenda for context."
  },
  {
    "objectID": "tidy.html#abstract",
    "href": "tidy.html#abstract",
    "title": "Tidy geographic data",
    "section": "1 Abstract",
    "text": "1 Abstract\nThis lecture will provide an introduction to working with geographic data using R in a ‘tidy’ way. It will focus on using the sf package to read, write, manipulate, and plot geographic data in combination with the tidyverse metapackage. Why use the sf package with the tidyverse? The lecture will outline some of the ideas underlying the tidyverse and how they can speed-up data analysis pipelines, while making data analysis code easier to read and write. We will see how the following lines:\nlibrary(sf)\nlibrary(tidyverse)\ncan provide a foundation on which the many geographic data analysis problems can be solved. The lecture will also cover on more recently developed packages that integrate with the tidyverse to a greater and lesser extent. We will look at how the geos package, which provides a simple and high-performance interface to the GEOS library for performing geometric operations on geographic data, integrates with the tidyverse. The tidyverse is not the right tool for every data analysis task and we touch on alternatives for working with raster data, with reference to the terra package, and alternative frameworks such as data.table. Finally, we will also look at how the ‘tidy’ philosophy could be implemented in other programming languages, such as Python.\nThe focus throughout will be on practical skills and using packages effectively within the wider context of project management tools, integrated development environments (we recommend VS Code with appropriate extensions or RStudio), and version control systems."
  },
  {
    "objectID": "tidy.html#learning-objectives",
    "href": "tidy.html#learning-objectives",
    "title": "Tidy geographic data",
    "section": "2 Learning objectives",
    "text": "2 Learning objectives\nBy the end of the session, participants will be able to:\n\nRead, write, manipulate, and plot geographic data using the sf package\nUse the tidyverse metapackage to speed-up the writing of geographic data analysis pipelines\nUse the geos package to perform geometric operations on geographic data\nUnderstand the strengths and weaknesses of the tidyverse for geographic data analysis"
  },
  {
    "objectID": "tidy.html#prerequisites",
    "href": "tidy.html#prerequisites",
    "title": "Tidy geographic data",
    "section": "3 Prerequisites",
    "text": "3 Prerequisites\nWe recommend you run the code in the practical session with a modern integrated development environment (IDE) such as\n\nRStudio: an IDE focussed on data science and software development with R. See posit.co for installation instructions.\nVS Code: a general purpose, popular and future-proof IDE with support for R. See github.com/REditorSupport/vscode-R and quarto.org for installation instructions.\n\nAfter you have installed a suitable IDE you will need to install R packages used in this tutorial. You can install the packages we’ll use with the following commands:\n\n# Install remotes if not already installed\nif (!requireNamespace(\"remotes\")) {\n    install.packages(\"remotes\")\n}\n\n# The packages we'll use\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"geos\",\n    \"data.table\",\n    \"spData\"\n)\n\n\nremotes::install_cran(pkgs)\n\n\nsapply(pkgs, require, character.only = TRUE)\n\n        sf  tidyverse       geos data.table     spData \n      TRUE       TRUE       TRUE       TRUE       TRUE"
  },
  {
    "objectID": "tidy.html#an-introduction-to-the-tidyverse",
    "href": "tidy.html#an-introduction-to-the-tidyverse",
    "title": "Tidy geographic data",
    "section": "4 An introduction to the tidyverse",
    "text": "4 An introduction to the tidyverse\nThe tidyverse is a collection of packages that provides a unified set of functions for data science. A good way to understand it is to get started with a small dataset.\nAfter loading the packages run the following commands to create an object called countries, containing countries whose centroids are within 200km of the Polish border:\n\nnames(world) # check we have the data\n\n [1] \"iso_a2\"    \"name_long\" \"continent\" \"region_un\" \"subregion\" \"type\"     \n [7] \"area_km2\"  \"pop\"       \"lifeExp\"   \"gdpPercap\" \"geom\"     \n\npoland = world |&gt;\n    filter(name_long == \"Poland\")\nworld_centroids = world |&gt;\n    st_centroid()\n\nWarning: st_centroid assumes attributes are constant over geometries\n\ncountry_centroids = world_centroids |&gt;\n  st_filter(poland, .predicate = st_is_within_distance, dist = 2e5)\ncountries = world |&gt;\n  filter(name_long %in% country_centroids$name_long)\ncountries_df = countries |&gt;\n  select(name_long, pop, area_km2) |&gt;\n  st_drop_geometry()\n\nDon’t worry about the syntax for now, we’ll explain it later. The important thing is that we now have a data frame with three columns, representing the name, population and area of four countries. We can print out the contents of the data frame by typing its name (this is equivalent to print(countries_df)):\n\ncountries_df\n\n# A tibble: 4 × 3\n  name_long           pop area_km2\n* &lt;chr&gt;             &lt;dbl&gt;    &lt;dbl&gt;\n1 Poland         38011735  310402.\n2 Lithuania       2932367   63831.\n3 Slovakia        5418649   47068.\n4 Czech Republic 10525347   81208.\n\n\nThe output above shows information about each country in a tabular. A feature of the tidyverse is that its data frame class (the tibble which extends base R’s data.frame as shown below) prints results in an informative and space-efficient way.\n\nclass(countries_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "tidy.html#exercises",
    "href": "tidy.html#exercises",
    "title": "Tidy geographic data",
    "section": "5 Exercises",
    "text": "5 Exercises\n\nRe-create the country_centroids object, using world_centroids and poland and inputs, but this time using base R syntax with the [ operator.\n\n\nBonus: use the bench::mark() function to compare the performance of the base R and tidyverse implementation"
  }
]