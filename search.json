[
  {
    "objectID": "osm-slides.html#session-overview",
    "href": "osm-slides.html#session-overview",
    "title": "Tidy geographic data",
    "section": "Session overview",
    "text": "Session overview\n\nSource: pretalx.earthmonitor.org/opengeohub-summer-school-2023/schedule/v/0.7/"
  },
  {
    "objectID": "osm-slides.html#system-dependencies",
    "href": "osm-slides.html#system-dependencies",
    "title": "Tidy geographic data",
    "section": "System dependencies",
    "text": "System dependencies\n\nSource: Pebesma (2018)"
  },
  {
    "objectID": "osm-slides.html#development-environments",
    "href": "osm-slides.html#development-environments",
    "title": "Tidy geographic data",
    "section": "Development environments",
    "text": "Development environments"
  },
  {
    "objectID": "osm-slides.html#rstudio",
    "href": "osm-slides.html#rstudio",
    "title": "Tidy geographic data",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "osm-slides.html#vs-code",
    "href": "osm-slides.html#vs-code",
    "title": "Tidy geographic data",
    "section": "VS Code",
    "text": "VS Code"
  },
  {
    "objectID": "osm-slides.html#key-features-of-sf",
    "href": "osm-slides.html#key-features-of-sf",
    "title": "Tidy geographic data",
    "section": "Key features of sf",
    "text": "Key features of sf\n\nSource: Lovelace, Nowosad, and Muenchow (2019)"
  },
  {
    "objectID": "osm-slides.html#sf-functions",
    "href": "osm-slides.html#sf-functions",
    "title": "Tidy geographic data",
    "section": "sf functions",
    "text": "sf functions\n\nSource: Pebesma (2018)"
  },
  {
    "objectID": "osm-slides.html#sf-dplyr-workflow",
    "href": "osm-slides.html#sf-dplyr-workflow",
    "title": "Tidy geographic data",
    "section": "sf + dplyr workflow",
    "text": "sf + dplyr workflow\nMermaid graph:\ngraph LR\n  A[Read data] --&gt; B[Transform data]\n  B --&gt; C[Visualize data]"
  },
  {
    "objectID": "osm-slides.html#practical-1330-1430",
    "href": "osm-slides.html#practical-1330-1430",
    "title": "Tidy geographic data",
    "section": "Practical (~13:30-14:30)",
    "text": "Practical (~13:30-14:30)\nWork through the code at ogh23.robinlovelace.net/tidy and answer the questions at your own pace.\n\nremotes::install_cran(pkgs)\n\n\n# The packages we'll use\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"geos\",\n    \"data.table\",\n    \"spData\"\n)\nsapply(pkgs, require, character.only = TRUE)\n\n        sf  tidyverse       geos data.table     spData \n      TRUE       TRUE       TRUE       TRUE       TRUE"
  },
  {
    "objectID": "osm-slides.html#tidyverse-alternatives",
    "href": "osm-slides.html#tidyverse-alternatives",
    "title": "Tidy geographic data",
    "section": "tidyverse alternatives",
    "text": "tidyverse alternatives\n…"
  },
  {
    "objectID": "osm-slides.html#geos",
    "href": "osm-slides.html#geos",
    "title": "Tidy geographic data",
    "section": "geos",
    "text": "geos\n…"
  },
  {
    "objectID": "tidy-slides.html#session-overview",
    "href": "tidy-slides.html#session-overview",
    "title": "Tidy geographic data",
    "section": "Session overview",
    "text": "Session overview\n\nSource: pretalx.earthmonitor.org/opengeohub-summer-school-2023/schedule/v/0.7/\n\nParallel to the Python session."
  },
  {
    "objectID": "tidy-slides.html#system-dependencies",
    "href": "tidy-slides.html#system-dependencies",
    "title": "Tidy geographic data",
    "section": "System dependencies",
    "text": "System dependencies\n\nSource: Pebesma (2018)\n\nSystem dependencies."
  },
  {
    "objectID": "tidy-slides.html#system-dependencies-code",
    "href": "tidy-slides.html#system-dependencies-code",
    "title": "Tidy geographic data",
    "section": "System dependencies: code",
    "text": "System dependencies: code\n\nsf startup message:\n\n\nsf::sf_extSoftVersion()\n\n          GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H \n      \"3.10.2\"        \"3.4.1\"        \"8.2.1\"         \"true\"         \"true\" \n          PROJ \n       \"8.2.1\" \n\n\n\nOn Linux sf uses system installations of GDAL, GEOS and PROJ.4:\n\n\ngdalinfo --version\nwhich gdal-config\n\nGDAL 3.4.1, released 2021/12/27\n/usr/bin/gdal-config\n\n\n\nOn Windows, sf ships with binary versions installed"
  },
  {
    "objectID": "tidy-slides.html#development-environments",
    "href": "tidy-slides.html#development-environments",
    "title": "Tidy geographic data",
    "section": "Development environments",
    "text": "Development environments\n\n\nRStudio\n\nPro: works out of the box\nPro: Great R autocomplete\nPro: Features for data science + R package development\nCon: A bit R specific\n\nVS Code\n\nPro: Works with many languages\nPro: Unbeatable ecosystem of extensions\nPro: Advanced features such as copilot + works in Codespaces\nCon: A bit fiddly to set up, rough edges when using R"
  },
  {
    "objectID": "tidy-slides.html#rstudio-1",
    "href": "tidy-slides.html#rstudio-1",
    "title": "Tidy geographic data",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "tidy-slides.html#vs-code-1",
    "href": "tidy-slides.html#vs-code-1",
    "title": "Tidy geographic data",
    "section": "VS Code",
    "text": "VS Code"
  },
  {
    "objectID": "tidy-slides.html#results",
    "href": "tidy-slides.html#results",
    "title": "Tidy geographic data",
    "section": "Results",
    "text": "Results\n\n\n\nOn Twitter:\n\n\n\n\n\nOn Mastodon:"
  },
  {
    "objectID": "tidy-slides.html#on-mattermost",
    "href": "tidy-slides.html#on-mattermost",
    "title": "Tidy geographic data",
    "section": "On Mattermost",
    "text": "On Mattermost"
  },
  {
    "objectID": "tidy-slides.html#key-features-of-sf",
    "href": "tidy-slides.html#key-features-of-sf",
    "title": "Tidy geographic data",
    "section": "Key features of sf",
    "text": "Key features of sf\n\nSource: Lovelace, Nowosad, and Muenchow (2019)"
  },
  {
    "objectID": "tidy-slides.html#sf-functions",
    "href": "tidy-slides.html#sf-functions",
    "title": "Tidy geographic data",
    "section": "sf functions",
    "text": "sf functions\n\nSource: Pebesma (2018)"
  },
  {
    "objectID": "tidy-slides.html#practical-1330-1430",
    "href": "tidy-slides.html#practical-1330-1430",
    "title": "Tidy geographic data",
    "section": "Practical (~13:30-14:30)",
    "text": "Practical (~13:30-14:30)\nWork through the code at ogh23.robinlovelace.net/tidy and answer the questions at your own pace.\n\nremotes::install_cran(pkgs)\n\n\n# The packages we'll use\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"geos\",\n    \"data.table\",\n    \"spData\"\n)\nsapply(pkgs, require, character.only = TRUE)\n\n        sf  tidyverse       geos data.table     spData \n      TRUE       TRUE       TRUE       TRUE       TRUE"
  },
  {
    "objectID": "tidy-slides.html#tidyverse-alternatives",
    "href": "tidy-slides.html#tidyverse-alternatives",
    "title": "Tidy geographic data",
    "section": "tidyverse alternatives",
    "text": "tidyverse alternatives\n…"
  },
  {
    "objectID": "tidy-slides.html#geos",
    "href": "tidy-slides.html#geos",
    "title": "Tidy geographic data",
    "section": "geos",
    "text": "geos\n…"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OpenGeoHub Summer School 2023",
    "section": "",
    "text": "Quarto Publish\nThis repo contains code to support sessions that I will deliver for the OpenGeoHub Summer School 2023.\nAs shown in the course schedule I will deliver the following sessions:\nAbstracts for these sessions are provided below."
  },
  {
    "objectID": "index.html#reproducibility",
    "href": "index.html#reproducibility",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Reproducibility",
    "text": "Reproducibility\nYou can reproduce all of the results and run all the code in this repo. The quickest way to get started if you don’t already have the dependencies is with codespaces.\n\nIf it works you should see something like this:\n\nTo run the code locally download the code, e.g. with the following command after installing GitHub’s CLI tool:\ngh repo clone Robinlovelace/opengeohub2023\nThen open the project in RStudio, VS Code, and start looking at and running the code. You should be able to reproduce the rendered website interactively with the following command:\nquarto preview\nYou can also run the code in this repo in the Docker image hosted at https://github.com/Robinlovelace/opengeohub2023/pkgs/container/opengeohub2023 as follows, with the -v flag to mount the current directory in the container:\ndocker run -it -v $(pwd):/workspace opengeohub2023:latest\nIf you have VS Code installed you should be able to ‘Reopen in Container’ (not fully tested locally)."
  },
  {
    "objectID": "index.html#tidy-geographic-data-with-sf-dplyr-ggplot2-geos-and-friends",
    "href": "index.html#tidy-geographic-data-with-sf-dplyr-ggplot2-geos-and-friends",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Tidy geographic data with sf, dplyr, ggplot2, geos and friends",
    "text": "Tidy geographic data with sf, dplyr, ggplot2, geos and friends\n\nThis lecture will provide an introduction to working with geographic data using R in a ‘tidy’ way. It will focus on using the sf package to read, write, manipulate, and plot geographic data in combination with the tidyverse metapackage. Why use the sf package with the tidyverse? The lecture will outline some of the ideas underlying the tidyverse and how they can speed-up data analysis pipelines, while making data analysis code easier to read and write. We will see how the following lines\nlibrary(sf)\nlibrary(tidyverse)\ncan provide a foundation on which the many geographic data analysis problems can be solved. The lecture will also cover on more recently developed packages that integrate with the tidyverse to a greater and lesser extent. We will look at how the geos package, which provides a simple and high-performance interface to the GEOS library for performing geometric operations on geographic data, integrates with the tidyverse. The tidyverse is not the right tool for every data analysis task and we touch on alternatives for working with raster data, with reference to the terra package, and alternative frameworks such as data.table. Finally, we will also look at how the ‘tidy’ philosophy could be implemented in other programming languages, such as Python.\nThe focus throughout will be on practical skills and using packages effectively within the wider context of project management tools, integrated development environments (we recommend VS Code with appropriate extensions or RStudio), and version control systems."
  },
  {
    "objectID": "index.html#processing-large-openstreetmap-datasets-for-geocomputation",
    "href": "index.html#processing-large-openstreetmap-datasets-for-geocomputation",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Processing large OpenStreetMap datasets for geocomputation",
    "text": "Processing large OpenStreetMap datasets for geocomputation\nOpenStreetMap (OSM) is a free and openly editable map of the world. Like Wikipedia and unlike government or corperation maintained datasets, OSM is created and maintained by a community of volunteers, making it the premier decentralized and fastest evolving source of geographic vector data focussed on features relevant to human activity (e.g. roads, buildings, cafes) on planet Earth. Unlike Wikipedia, every data point in OSM has a geographic location and attributes must be structured as key-value pairs. OSM is a rich source of data for geocomputation, but the decentralized nature of the project and the sheer volume of data. ‘Planet.osm’ now has more nodes than there are people on Earth, with more than 8 billion nodes, and the rate of data creation is increasing as the community grows, to 10 million users in early 2023. The size and rapid evolution of OSM are great strengths, democratising geographic knowledge and ensuring resilience. However, these features can make it difficult to work with OSM data.\nThis lecture will provide an introduction to working with OSM and will cover the following:\n\nHow and where to download OSM data\nHow to process small amounts of OSM data using the osmdata R package\nHow to process large OSM ‘extracts’ data with the osmextract R package\nOther command line tools for working with OSM data, including the mature and widely used osmium tool, the pyrosm Python package and the osm2streets web application and Rust codebase\n\nFinally, the lecture will outline ideas for using OSM data. It will conclude with a call to action, inspiring the use of this rich resource to support policy objectives such as the fast and fair decarbonisation of the global economy as societies transition away from inefficient, polluting and costly fossil fuels."
  },
  {
    "objectID": "index.html#reproducibility-1",
    "href": "index.html#reproducibility-1",
    "title": "OpenGeoHub Summer School 2023",
    "section": "Reproducibility",
    "text": "Reproducibility\nTo install the dependencies for this repo, run the following command:\nremotes::install_github(\"robinlovelace/opengeohub2023\")\nThis repo also uses the renv package to manage dependencies. We saved the dependencies with the following command:\n\nrenv::snapshot()\n\nCode was generated from the .qmd files using the following commands:\n\nf = c(\"tidy.qmd\", \"osm.qmd\")\nf_r = gsub(\".qmd\", \".R\", f)\nfor(i in seq_along(f)) {\n  knitr::purl(f[i], f_r[i])\n}\n\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nThe content below was rendered from README.qmd in the robinlovelace/opengeohub23 GitHub repository where you can find the source code for this website."
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Tidy geographic data",
    "section": "",
    "text": "# knitr::opts_chunk$set(cache = TRUE)\nThese materials were created for the OpenGeoHub Summer School 2023.\nThey can be used with reference to the accompanying slides, available at ogh23.robinlovelace.net/opengeohub2023.\nSee the parent repo and session description in the agenda for context."
  },
  {
    "objectID": "tidy.html#learning-objectives",
    "href": "tidy.html#learning-objectives",
    "title": "Tidy geographic data",
    "section": "1.1 Learning objectives",
    "text": "1.1 Learning objectives\nBy the end of the session, participants will be able to:\n\nRead, write, manipulate, and plot geographic data using the sf package\nUse the tidyverse metapackage to speed-up the writing of geographic data analysis pipelines\nUse the geos package to perform geometric operations on geographic data\nUnderstand the strengths and weaknesses of the tidyverse for geographic data analysis"
  },
  {
    "objectID": "tidy.html#prerequisites",
    "href": "tidy.html#prerequisites",
    "title": "Tidy geographic data",
    "section": "1.2 Prerequisites",
    "text": "1.2 Prerequisites\nWe recommend you run the code in the practical session with a modern integrated development environment (IDE) such as\n\nRStudio: an IDE focussed on data science and software development with R. See posit.co for installation instructions.\nVS Code: a general purpose, popular and future-proof IDE with support for R. See github.com/REditorSupport/vscode-R and quarto.org for installation instructions.\n\nAfter you have installed a suitable IDE you will need to install R packages used in this tutorial. You can install the packages we’ll use with the following commands:\n\n# Install remotes if not already installed\nif (!requireNamespace(\"remotes\")) {\n    install.packages(\"remotes\")\n}\n\n# The packages we'll use\npkgs = c(\n    \"sf\",\n    \"tidyverse\",\n    \"geos\",\n    \"ggspatial\",\n    \"spData\"\n)\n\n\nremotes::install_cran(pkgs)\n\nAfter running the above commands, you should be able to load the packages with the following command (we will load the packages individually in subsequent sections):\n\nsapply(pkgs, require, character.only = TRUE)"
  },
  {
    "objectID": "tidy.html#reading-and-writing-geographic-data",
    "href": "tidy.html#reading-and-writing-geographic-data",
    "title": "Tidy geographic data",
    "section": "2.1 Reading and writing geographic data",
    "text": "2.1 Reading and writing geographic data\nYou can read and write a wide range of vector geographic data with sf. Save the countries object to a file called countries.geojson and inspect the result.\n\nsf::write_sf(countries, \"countries.geojson\", delete_dsn = TRUE)\n\nYou can read the file in again with read_sf() (which returns a ‘tidyverse compliant’ tibble data frame) or st_read(), as shown below.\n\ncountries_new1 = sf::read_sf(\"countries.geojson\")\ncountries_new2 = sf::st_read(\"countries.geojson\")\n\nReading layer `countries' from data source \n  `/home/runner/work/opengeohub2023/opengeohub2023/countries.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 4 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 12.24011 ymin: 47.75843 xmax: 26.58828 ymax: 56.37253\nGeodetic CRS:  WGS 84\n\n\nFor most purposes the two representations are the same, although the ‘tibble’ version’s print outpout is slightly different.\n\ncountries_new1 |&gt;\n  head(2)\n\nSimple feature collection with 2 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 14.07452 ymin: 49.0274 xmax: 26.58828 ymax: 56.37253\nGeodetic CRS:  WGS 84\n# A tibble: 2 × 11\n  iso_a2 name_long continent region_un subregion   type  area_km2    pop lifeExp\n  &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 PL     Poland    Europe    Europe    Eastern Eu… Sove…  310402. 3.80e7    77.6\n2 LT     Lithuania Europe    Europe    Northern E… Sove…   63831. 2.93e6    74.5\n# ℹ 2 more variables: gdpPercap &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\ncountries_new2 |&gt;\n  head(2)\n\nSimple feature collection with 2 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 14.07452 ymin: 49.0274 xmax: 26.58828 ymax: 56.37253\nGeodetic CRS:  WGS 84\n  iso_a2 name_long continent region_un       subregion              type\n1     PL    Poland    Europe    Europe  Eastern Europe Sovereign country\n2     LT Lithuania    Europe    Europe Northern Europe Sovereign country\n   area_km2      pop  lifeExp gdpPercap                       geometry\n1 310402.33 38011735 77.60244  24347.07 MULTIPOLYGON (((23.48413 53...\n2  63831.09  2932367 74.51707  26258.21 MULTIPOLYGON (((26.49433 55...\n\n\nA nice function to explore the differences between the two objects is waldo::compare(). It shows that, other than their classes, the two objects are identical:\n\nwaldo::compare(countries_new1, countries_new2)\n\n`class(old)`: \"sf\" \"tbl_df\" \"tbl\" \"data.frame\"\n`class(new)`: \"sf\"                \"data.frame\"\n\n\nSee the full list of file formats that you can read and write with sf with the following commands:\n\ndrvs = sf::st_drivers() |&gt;\n  as_tibble()\nhead(drvs)\n\n# A tibble: 6 × 7\n  name   long_name                       write copy  is_raster is_vector vsi  \n  &lt;chr&gt;  &lt;chr&gt;                           &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;     &lt;lgl&gt;     &lt;lgl&gt;\n1 ESRIC  Esri Compact Cache              FALSE FALSE TRUE      TRUE      TRUE \n2 FITS   Flexible Image Transport System TRUE  FALSE TRUE      TRUE      FALSE\n3 PCIDSK PCIDSK Database File            TRUE  FALSE TRUE      TRUE      TRUE \n4 netCDF Network Common Data Format      TRUE  TRUE  TRUE      TRUE      TRUE \n5 PDS4   NASA Planetary Data System 4    TRUE  TRUE  TRUE      TRUE      TRUE \n6 VICAR  MIPL VICAR file                 TRUE  TRUE  TRUE      TRUE      TRUE \n\n\n\n2.1.1 Exercises\n\nRe-create the country_centroids object, using world_centroids and poland and inputs, but this time using base R syntax with the [ operator.\n\nBonus: use the bench::mark() function to compare the performance of the base R and tidyverse implementation\nOpen question: Is this a good thing to benchmark? Why or why not?\n\n\n\nInspect the full list of drivers, e.g. with the command View(drvs).\n\nWhich formats are you likely to use and why?\nBonus: take a look at Chapter 8 of Geocomputation with R for more on reading and writing geographic (including raster) data with R."
  },
  {
    "objectID": "tidy.html#attribute-operations-with-dplyr",
    "href": "tidy.html#attribute-operations-with-dplyr",
    "title": "Tidy geographic data",
    "section": "2.2 Attribute operations with dplyr",
    "text": "2.2 Attribute operations with dplyr\ndplyr is a large package with many functions for working with data frames. The five key ‘verbs’ described as:\n\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names.\nfilter() picks cases based on their values.\nsummarise() reduces multiple values down to a single summary.\narrange() changes the ordering of the rows.\n\n\nLet’s take a brief look at each.\n\ncountries_modified = countries |&gt;\n  mutate(pop_density = pop / area_km2) |&gt;\n  select(name_long, pop_density) |&gt;\n  filter(pop_density &gt; 100) |&gt;\n  arrange(desc(pop_density))\ncountries_modified\n\nSimple feature collection with 3 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 12.24011 ymin: 47.75843 xmax: 24.02999 ymax: 54.85154\nGeodetic CRS:  WGS 84\n# A tibble: 3 × 3\n  name_long      pop_density                                                geom\n  &lt;chr&gt;                &lt;dbl&gt;                                  &lt;MULTIPOLYGON [°]&gt;\n1 Czech Republic        130. (((15.017 51.10667, 14.57072 51.00234, 14.30701 51…\n2 Poland                122. (((23.48413 53.9125, 23.24399 54.22057, 22.7311 54…\n3 Slovakia              115. (((22.55814 49.08574, 21.60781 49.47011, 20.88796 …\n\n\nThe summarise() function is often used in combination with group_by(), e.g. as follows:\n\ncountries_summarised = countries |&gt;\n  group_by(contains_a = str_detect(name_long, \"a\")) |&gt;\n  summarise(n = n(), mean_pop = mean(pop))\ncountries_summarised\n\nSimple feature collection with 2 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 12.24011 ymin: 47.75843 xmax: 26.58828 ymax: 56.37253\nGeodetic CRS:  WGS 84\n# A tibble: 2 × 4\n  contains_a     n  mean_pop                                                geom\n  &lt;lgl&gt;      &lt;int&gt;     &lt;dbl&gt;                                       &lt;POLYGON [°]&gt;\n1 FALSE          1 10525347  ((15.017 51.10667, 14.57072 51.00234, 14.30701 51.…\n2 TRUE           3 15454250. ((26.49433 55.61511, 25.53305 56.1003, 25.00093 56…\n\n\nThe operation creates a new variable called contains_a that is TRUE if the country name contains an “a” and FALSE otherwise. Perhaps more impressively, it also automatically updated the geometry column of the combined countries containing the letter “a”, highlighting dplyr’s ability to work with geographic data represented as sf objects.\n\ncountries_summarised |&gt;\n  ggplot() +\n    geom_sf(aes(fill = contains_a)) +\n    geom_sf(data = countries, fill = NA, linetype = 3) \n\n\n\n\nFigure 2: Result of running dplyr group_by() and summarise() functions on countries data\n\n\n\n\n\n2.2.1 Exercises\n\nCreate a new data frame called countries_modified2 that contains the name, population and area of countries with a population density of more than 100 people per km2, sorted by area in descending order.\nDo the same with base R functions and the [ operator.\n\nWhat are the pros and cons of each?\nWhich do you prefer?"
  },
  {
    "objectID": "tidy.html#making-maps-with-ggplot2",
    "href": "tidy.html#making-maps-with-ggplot2",
    "title": "Tidy geographic data",
    "section": "2.3 Making maps with ggplot2",
    "text": "2.3 Making maps with ggplot2\nAs shown above, geom_sf() works ‘out of the box’ with geographic data. We can modify plotting commands to control outputs as showing in Figure 3 and generate publishable maps.\n\nlibrary(ggspatial)\ncountries |&gt;\n  ggplot() +\n    geom_sf(fill = \"grey80\", color = \"black\") +\n    geom_sf(data = countries_modified, aes(fill = pop_density)) +\n    scale_fill_viridis_c() +\n    theme_minimal()\n\n\n\n\nFigure 3: Map created with ggplot2, with fill color controlled by the pop_density variable and multiple layers.\n\n\n\n\nMap making is an iterative and time consuming process. Iterate on the code above, e.g. by changing the color palette, adding a title, and adding a legend.\nThere are many add-ons to ggplot2. ggspatial can be used to add a basemap to a plot with annotation_map_tile(), as illustrated in Figure 4.\n\nrosm::osm.types()\n\n [1] \"osm\"                    \"opencycle\"              \"hotstyle\"              \n [4] \"loviniahike\"            \"loviniacycle\"           \"hikebike\"              \n [7] \"hillshade\"              \"osmgrayscale\"           \"stamenbw\"              \n[10] \"stamenwatercolor\"       \"osmtransport\"           \"thunderforestlandscape\"\n[13] \"thunderforestoutdoors\"  \"cartodark\"              \"cartolight\"            \n\nggplot() +\n  annotation_map_tile() +\n  layer_spatial(countries_modified, aes(fill = pop_density),\n                linewidth = 3, alpha = 0.3) +\n  scale_fill_viridis_c()\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\n\n\nFigure 4: Map created with ggplot2, with a basemap added with annotation_map_tile().\n\n\n\n\n\n2.3.1 Exercises\n\nWith reference to the documentation at ggplot2.tidyverse.org/index.html, modify the code above to create a map with a title, legend and a different color palette.\nWith reference to paleolimbot.github.io/ggspatial/, add annotations including scale bar, north arrow and a text label to the map.\nBonus: try map making with tmap and test out the interactive mode (set with tmap_mode(\"interactive\")).”\nBonus: try reproducing maps presented in Chapter 9 of Geocomputation with R with ggplot2 and ggspatial. Which mapping framework do you prefer and why?\nIf you use raster data, take a look at the tidyterra documentation."
  },
  {
    "objectID": "tidy.html#getting-and-reading-in-the-data",
    "href": "tidy.html#getting-and-reading-in-the-data",
    "title": "Tidy geographic data",
    "section": "3.1 Getting and reading-in the data",
    "text": "3.1 Getting and reading-in the data\nTo get the data for this session, download and unzip the data.zip file in the releases. You can do that in R with the following commands:\n\nu = \"https://github.com/Robinlovelace/opengeohub2023/releases/download/data/data.zip\"\nf = basename(u)\nif (!dir.exists(\"data\")) {\n  download.file(u, f)\n  unzip(f)\n}\n\nCheck you have downloaded the files with the following command:\n\nlist.files(\"data\")[1:3]\n\n[1] \"gtfs\" \"hls\"  \"osm\""
  },
  {
    "objectID": "tidy.html#vector-data",
    "href": "tidy.html#vector-data",
    "title": "Tidy geographic data",
    "section": "3.2 Vector data",
    "text": "3.2 Vector data\nWe’ll start with a dataset that we’ll create ourselves, representing 4 points of interest (pois) in relation to the OpenGeoHub Summer School 2023.\n\npoi_df = tribble(\n  ~name, ~lon, ~lat,\n  \"Faculty\",        16.9418, 52.4643,\n  \"Hotel ForZa\",    16.9474, 52.4436,\n  \"Hotel Lechicka\", 16.9308, 52.4437,\n  \"FairPlayce\",     16.9497, 52.4604\n)\npoi_sf = sf::st_as_sf(poi_df, coords = c(\"lon\", \"lat\"))\nsf::st_crs(poi_sf) = \"EPSG:4326\"\n\n\n\n# column: screen-inset-shaded\nlibrary(leaflet)\nleaflet() %&gt;%\n  addTiles() %&gt;%  # Add default OpenStreetMap map tiles\n  addMarkers(\n    lng = poi_df$lon,\n    lat = poi_df$lat,\n    popup = poi_df$name\n  )\n\nFor comparison, we can create the same map with a single line of code with {tmap} (after loading and setting-up the package) as follows:\n\nlibrary(tmap)\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nWe will also check the version of {tmap} that we’re using, in anticipation of a major update (to v4, expected later in 2023).\n\ntm_shape(poi_sf) + tm_bubbles(popup.vars = \"name\")\n\nThe interactive maps below illustrate the outputs of the preceding map-making commands, highlighting the convenience of using {tmap}, which requires far fewer lines of code, although {leaflet} and other low-level map-making packages can offer more control.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Interactive maps of 4 locations in Poznan made with 7 lines of code with {leaflet} (left), and 1 line of {tmap} code (right).\n\n\nTurn off the interactive mode as follows.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe next code chunk reads-in a larger dataset, representing transport-related features around Poznan (note: you need to have downloaded and unzipped the data.zip file into your project or working directory for this to work):\n\npol_all = sf::read_sf(\"./data/osm/gis_osm_transport_a_free_1.shp\")\npol_all\n\nSimple feature collection with 282 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 15.76877 ymin: 51.42587 xmax: 18.51031 ymax: 53.52821\nGeodetic CRS:  WGS 84\n# A tibble: 282 × 5\n   osm_id    code fclass          name                                  geometry\n   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;                            &lt;POLYGON [°]&gt;\n 1 27923283  5656 apron           &lt;NA&gt;                 ((16.84088 52.42479, 16.…\n 2 28396243  5656 apron           &lt;NA&gt;                 ((16.9675 52.32743, 16.9…\n 3 28396249  5656 apron           &lt;NA&gt;                 ((16.98029 52.32399, 16.…\n 4 28396250  5656 apron           &lt;NA&gt;                 ((16.97407 52.32418, 16.…\n 5 30164579  5656 apron           &lt;NA&gt;                 ((16.71011 53.16458, 16.…\n 6 32225811  5601 railway_station Czerwonak            ((16.9798 52.46868, 16.9…\n 7 36204378  5622 bus_station     &lt;NA&gt;                 ((16.95469 52.40964, 16.…\n 8 50701732  5651 airport         Lądowisko Poznań-Be… ((17.19788 52.53491, 17.…\n 9 55590985  5622 bus_station     Dworzec PKS-stanowi… ((17.20243 52.80927, 17.…\n10 56064358  5651 airport         Port lotniczy Zielo… ((15.76877 52.13175, 15.…\n# ℹ 272 more rows\n\n\nLet’s filter-out a feature that matches a particular character string:\n\npol = pol_all |&gt;\n  filter(str_detect(name, \"Port*.+Poz\"))\n\nPlot it, first with base R and then with {ggplot2}and {tmap}, resulting in maps shown below.\n\nplot(pol)\npol |&gt;\n  ggplot() +\n  geom_sf()\ntm_shape(pol) + tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe’ll read-in a point layer from a CSV file as shown below.\n\nstops_raw = read_csv('data/gtfs/stops.txt')\n\nRows: 2921 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): stop_code, stop_name, zone_id\ndbl (3): stop_id, stop_lat, stop_lon\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstops_df = stops_raw |&gt;\n  select(-stop_code)\nstops = st_as_sf(stops_df, coords = c(\"stop_lon\", \"stop_lat\"), crs = \"EPSG:4326\")\n\n\n3.2.1 Buffers\nThe most widly used way to create buffers in R is with the function st_buffer() from the sf package. Let’s create buffers of 150 m around each of the points in the poi_sf dataset. This is done in the following chunk, which first checks to see if the s2 spherical geometry engine is set to run (it is by default).\n\nsf::sf_use_s2()\n\n[1] TRUE\n\npoi_buffers = st_buffer(poi_sf, dist = 150)\n\nAs described in Chapter 7 or Geocomputation with R, sf ‘knows that the world is round’ and uses a spherical geometry engine to calculate distances for unprojected data. This is a major advantage of sf over other packages for working with geographic data, such as GeoPandas in Python, which does not currently support spherical geometry operations (see issue 2098 in the GeoPandas issue tracker for details).\nWe can measure the area of the buffers with the following command:\n\nareas = st_area(poi_buffers)\n\nA nice feature of sf is that it returns the area in square meters, even though the input data is in degrees. sf uses the units package behind the scenes to convert between units, meaning you can convert the output to different units, as shown below.\n\nareas |&gt;\n  units::set_units(ha)\n\nUnits: [ha]\n[1] 7.165668 7.164428 7.165692 7.166715\n\n\nSometimes it’s useful to drop the units class, which can be done with the units::drop_units() function, as shown below.\n\nareas |&gt;\n  units::set_units(ha) |&gt;\n  units::drop_units() |&gt;\n  round()\n\n[1] 7 7 7 7\n\n\n\n\n3.2.2 Spatial subsetting\nNote: this section is adapted from Section 2.12 of Working with Spatial Data in Python. Let’s find the bus stops that are within 150 m of the poi_sf points.\n\nstops_nearby = stops[poi_buffers, ]\nstops_nearby\n\nSimple feature collection with 4 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 16.92882 ymin: 52.44307 xmax: 16.94161 ymax: 52.4653\nGeodetic CRS:  WGS 84\n# A tibble: 4 × 4\n  stop_id stop_name             zone_id            geometry\n    &lt;dbl&gt; &lt;chr&gt;                 &lt;chr&gt;           &lt;POINT [°]&gt;\n1     418 UAM Wydział Geografii A       (16.94108 52.46419)\n2     467 Umultowska            A       (16.92882 52.44426)\n3     468 Umultowska            A       (16.93039 52.44307)\n4     417 UAM Wydział Geografii A        (16.94161 52.4653)\n\n\n\n\n3.2.3 Spatial joins\nSpatial joins can be performed with the st_join() function as follows:\n\npois_joined = st_join(poi_buffers, stops)\npois_joined\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 16.92856 ymin: 52.44223 xmax: 16.95195 ymax: 52.46567\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 5\n  name                                        geometry stop_id stop_name zone_id\n* &lt;chr&gt;                                  &lt;POLYGON [°]&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  \n1 Faculty        ((16.93959 52.46441, 16.93957 52.464…     418 UAM Wydz… A      \n2 Faculty        ((16.93959 52.46441, 16.93957 52.464…     417 UAM Wydz… A      \n3 Hotel ForZa    ((16.94759 52.44224, 16.94762 52.442…      NA &lt;NA&gt;      &lt;NA&gt;   \n4 Hotel Lechicka ((16.93275 52.44435, 16.93275 52.444…     467 Umultows… A      \n5 Hotel Lechicka ((16.93275 52.44435, 16.93275 52.444…     468 Umultows… A      \n6 FairPlayce     ((16.9477 52.461, 16.94765 52.46092,…      NA &lt;NA&gt;      &lt;NA&gt;   \n\n\n\n\n3.2.4 Exercises\n\nCreate a static map of the stops in Poznan, using the stops object created above, with a mapping package of your preference. Set the colour of each stop by zone_id.\n\nBonus: also create an interactive map.\n\nAdvanced: Reproduce the results presented above by following the Python code at geobgu.xyz/presentations/p_2023_ogh/01-vector.html.\n\nWhich language do you prefer for the types of task presented here and why?"
  },
  {
    "objectID": "tidy.html#raster-data-example",
    "href": "tidy.html#raster-data-example",
    "title": "Tidy geographic data",
    "section": "3.3 Raster data example",
    "text": "3.3 Raster data example\nBuilding on the introduction to raster data with Python, this section introduces raster data with the {terra} package.\nLoad it as follows:\n\nlibrary(terra)\n\nterra 1.7.39\n\n\n\nAttaching package: 'terra'\n\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\n\nRead-in and plot a single raster layer with the following command:\n\nsrc = rast('data/hls/HLS.S30.T33UXU.2022200T095559.v2.0.B02.tiff')\nterra::plot(src, col = gray.colors(10))\n\n\n\n\nFigure 6: Plotting a single raster layer with terra\n\n\n\n\nWe will translate the following Python code to R:\nfiles = glob.glob('data/hls/*.tiff')\n\nfiles = list.files(\"data/hls\", pattern = \"tiff\", full.names = TRUE)\nfiles\n\n[1] \"data/hls/HLS.S30.T33UXU.2022200T095559.v2.0.B02.tiff\"\n[2] \"data/hls/HLS.S30.T33UXU.2022200T095559.v2.0.B03.tiff\"\n[3] \"data/hls/HLS.S30.T33UXU.2022200T095559.v2.0.B04.tiff\"\n[4] \"data/hls/HLS.S30.T33UXU.2022200T095559.v2.0.B08.tiff\"\n\n\n\nr = rast(files)\nr\n\nclass       : SpatRaster \ndimensions  : 3660, 3660, 4  (nrow, ncol, nlyr)\nresolution  : 30, 30  (x, y)\nextent      : 6e+05, 709800, 5790240, 5900040  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 33N (EPSG:32633) \nsources     : HLS.S30.T33UXU.2022200T095559.v2.0.B02.tiff  \n              HLS.S30.T33UXU.2022200T095559.v2.0.B03.tiff  \n              HLS.S30.T33UXU.2022200T095559.v2.0.B04.tiff  \n              HLS.S30.T33UXU.2022200T095559.v2.0.B08.tiff  \nnames       : Blue, Green, Red, NIR_Broad \n\nsummary(r)\n\nWarning: [summary] used a sample\n\n\n      Blue            Green             Red           NIR_Broad   \n Min.   :-213.0   Min.   :  15.0   Min.   : -12.0   Min.   :  56  \n 1st Qu.: 202.0   1st Qu.: 435.0   1st Qu.: 313.0   1st Qu.:2088  \n Median : 319.0   Median : 617.0   Median : 586.0   Median :2469  \n Mean   : 342.3   Mean   : 623.7   Mean   : 669.2   Mean   :2648  \n 3rd Qu.: 434.0   3rd Qu.: 746.0   3rd Qu.: 955.0   3rd Qu.:3174  \n Max.   :4508.0   Max.   :5131.0   Max.   :5428.0   Max.   :6092  \n\n\nWe can plot the result as follows:\n\nplot(r)\n\n\n\n\nFigure 7: Output of plot(r), showing the four bands of the raster layer\n\n\n\n\nAs shown, the result is an object with Blue, Green, Red and NIR bands, in that order. We can select only Red, Green, Blue bands, in that order, as follows:\n\nr_rgb = r[[c(\"Red\", \"Green\", \"Blue\")]]\n\nIf you try plotting the result with plotRGB(r), you will get an error. You can use the stretch argument to stretch the values and avoid errors caused by outliers.\n\nplotRGB(r, stretch = \"lin\")\n\n\n\n\nFigure 8: Plotting a RGB raster layer with terra\n\n\n\n\nWe can also remove outliers with the clamp() function or manually, as shown below:\n\n\n\n\nr_clamp = clamp(r, 0, 4000)\nplotRGB(r_clamp)\ntop_01pct = quantile(values(r_rgb), probs = 0.999, na.rm = TRUE)\nbottom_01pct = quantile(values(r_rgb), probs = 0.001, na.rm = TRUE)\nr_to_plot = r_rgb\nr_to_plot[r_rgb &gt; top_01pct] = top_01pct\nr_to_plot[r_rgb &lt; bottom_01pct] = bottom_01pct\nplotRGB(r_to_plot)\n\n\n\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n\n\n\n\n\n\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n\n\n\n\n\n\n\n\n\nFigure 9: Plotting a RGB raster layer with terra, with outliers removed with clamp() (left) and manually (right)\n\n\nSave the combined raster as follows:\n\n# write the r file:\nwriteRaster(r, \"data/hls/combined.tif\", overwrite = TRUE)\nwriteRaster(r_to_plot, \"data/hls/r_to_plot.tif\", overwrite = TRUE)\n\n\n3.3.1 Exercises\n\nExperiment with arguments passed to clamp(), stretch() and plotRGB() to see how they affect the output.\nTry plotting the raster in another program like QGIS, which looks better?"
  },
  {
    "objectID": "tidy.html#exercises-5",
    "href": "tidy.html#exercises-5",
    "title": "Tidy geographic data",
    "section": "4.1 Exercises",
    "text": "4.1 Exercises\n\nBenchmark the union operation in geos and sf with the bench::mark() function.\n\nWhich is faster?\nWhich is easier to use?\nWhich do you prefer?"
  },
  {
    "objectID": "tidy.html#tidypolars",
    "href": "tidy.html#tidypolars",
    "title": "Tidy geographic data",
    "section": "5.1 tidypolars",
    "text": "5.1 tidypolars\nIf you want to give this package a spin, run the following command:\n\ninstall.packages(\n  'tidypolars', \n  repos = c('https://etiennebacher.r-universe.dev/bin/linux/jammy/4.3', getOption(\"repos\"))\n)"
  },
  {
    "objectID": "tidy.html#rsgeo",
    "href": "tidy.html#rsgeo",
    "title": "Tidy geographic data",
    "section": "5.2 rsgeo",
    "text": "5.2 rsgeo\nA work in progress is the rsgeo package, which aims to provide an seamless interface between R and the geo Rust crate. This could open the possiblity of calling other high-performance Rust libraries from R, although the package is at an early stage of development and probably not ready for production use.\nWe can check the installation works as follows:\n\ninstall.packages('rsgeo', repos = c('https://josiahparry.r-universe.dev', 'https://cloud.r-project.org'))\n\n\nlibrary(rsgeo)\n\nWarning: Can't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\nCan't find generic `is_geometry` in package sf to register S3 method.\nℹ This message is only shown to developers using devtools.\nℹ Do you need to update sf to the latest version?\n\n\n\nAttaching package: 'rsgeo'\n\n\nThe following object is masked from 'package:terra':\n\n    centroids\n\n\nThe following object is masked from 'package:dplyr':\n\n    contains\n\n\nThe following object is masked from 'package:tidyr':\n\n    contains\n\n\nThe following objects are masked from 'package:ggplot2':\n\n    geom_point, geom_polygon\n\n\nThe following object is masked from 'package:base':\n\n    within\n\ncountries_rs  = as_rsgeom(sf::st_geometry(countries))\ncountries_rs\n\n&lt;rs_MULTIPOLYGON[4]&gt;\n[1] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 23.4841276384498...\n[2] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 26.4943314958837...\n[3] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 22.5581376482117...\n[4] (MultiPolygon([Polygon { exterior: LineString([Coord { x: 15.0169958838586...\n\nbench::mark(check = FALSE,\n  sf = sf::st_union(countries),\n  geos = geos::geos_make_collection(geos::geos_unary_union(countries_geos)),\n  rsgeo = rsgeo::union_geoms(countries_rs)\n)\n\n# A tibble: 3 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n1 sf           7.66ms   7.98ms      125.     121KB     2.12\n2 geos        85.61µs  97.31µs    10170.        0B     2.20\n3 rsgeo      486.65µs 525.55µs     1896.        0B     0"
  },
  {
    "objectID": "osm.html",
    "href": "osm.html",
    "title": "Processing large OpenStreetMap datasets for research",
    "section": "",
    "text": "TBC."
  }
]