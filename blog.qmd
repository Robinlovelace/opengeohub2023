---
title: "Teaching R and Python for geographic data: shared experiences and lessons learned"
# Render on save: true
---

```{r}
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# install python packages needed for this document:
pkgs = c("geopandas", "shapely", "pandas", "rasterio", "matplotlib")
reticulate::py_install(pkgs)
```

# Introduction

In this blog post, we talk about our experience teaching R and Python for geocomputation, broadly defined as [follows](https://r.geocompx.org/intro#what-is-geocomputation):

> Working with geographic data in a computational way, focusing on code, reproducibility and modularity.

There are are two major motivations for this post:

- To share our experience teaching R and Python for geocomputation, at the OpenGeoHub Summer School in Poznan, Poland
- To report progress on our open source book, [Geocomputation with Python](https://py.geocompx.org/)

The post is based on the following lecture notes, which we recommend checking out for deeper dives into the R and Python implementations of geocomputation:

- [Tidy geographic data with sf, dplyr, ggplot2, geos and friends](https://ogh23.robinlovelace.net/tidy)
- [Working with Spatial Data in Python](https://geobgu.xyz/presentations/p_2023_ogh/)
- [Tools and packages to query and process Sentinel-1 and Sentinel-2 data with R and Python](https://github.com/loreabad6/ogh23)

# Working with vector geographic data

## Loading packages

We will start by loading core packages for working with geographic vector and attribute data.
See detailed description of [R](https://ogh23.robinlovelace.net/tidy#vector-data) and [Python](https://geobgu.xyz/presentations/p_2023_ogh/01-vector.html) implementations in the respective lecture note sections.


::: {.panel-tabset group="language"}

## Python

```{python}
import pandas as pd
from shapely import Point
import geopandas as gpd
```

## R

```{r}
library(sf)
library(tidyverse)
```

:::

## Creating geographic data

The following commands create geographic datasets 'from scratch'.
Most projects start with pre-generated data, but it's useful to create datasets to understand data structures.

::: {.panel-tabset group="language"}

## Python

```{python}
poi = gpd.GeoDataFrame([
    {"name": "Faculty",        "geometry": Point(16.9418, 52.4643)},
    {"name": "Hotel ForZa",    "geometry": Point(16.9474, 52.4436)},
    {"name": "Hotel Lechicka", "geometry": Point(16.9308, 52.4437)},
    {"name": "FairPlayce",     "geometry": Point(16.9497, 52.4604)},
], crs=4326)
```

## R

```{r}
poi_df = tribble(
  ~name, ~lon, ~lat,
  "Faculty",        16.9418, 52.4643,
  "Hotel ForZa",    16.9474, 52.4436,
  "Hotel Lechicka", 16.9308, 52.4437,
  "FairPlayce",     16.9497, 52.4604
)
poi_sf = sf::st_as_sf(poi_df, coords = c("lon", "lat"))
sf::st_crs(poi_sf) = "EPSG:4326"
```


:::

### Downloading and unzipping data

The following commands download and unzip data from the internet.

::: {.panel-tabset group="language"}

## Python

```{python}
import urllib.request
import zipfile
import os
u = "https://github.com/Robinlovelace/opengeohub2023/releases/download/data/data.zip"
f = os.path.basename(u)
if not os.path.exists("data"):
    urllib.request.urlretrieve(u, f)
    with zipfile.ZipFile(f, 'r') as zip_ref:
        zip_ref.extractall()
```

## R

```{r}
u = "https://github.com/Robinlovelace/opengeohub2023/releases/download/data/data.zip"
f = basename(u)
if (!dir.exists("data")) {
  download.file(u, f)
  unzip(f)
}
```

:::

## Reading and printing geographic data

As shown below, Python and R implemenations to import a shapefile are similar.

::: {.panel-tabset group="language"}

## Python

```{python}
pol_all = gpd.read_file('data/osm/gis_osm_transport_a_free_1.shp')
pol_all
```

## R

```{r}
pol_all = sf::read_sf("data/osm/gis_osm_transport_a_free_1.shp")
pol_all
```

:::

## Subsetting by attributes

The following commands select a subset of the data based on attribute values.

::: {.panel-tabset group="language"}

## Python

```{python}
pol = pol_all[pol_all['name'].str.contains('Port*.+Poz', na=False)]
pol
```

## R

```{r}
pol = pol_all |>
  filter(str_detect(name, "Port*.+Poz"))
pol
```

:::

## Basic plotting

The following commands plot the data.
Note that by default, R's `plot()` method for `{sf}` objects creates a plot for each column in the data (up to 9 by default).

::: {.panel-tabset group="language"}

## Python

```{python}
pol.plot();
```

## R

```{r}
plot(pol)
```

:::

The arguments needed to change the colour of the fill and border are different in R and Python, but the results are similar.

::: {.panel-tabset group="language"}

## Python

```{python}
pol.plot(color='none', edgecolor='black');
```

## R

```{r}
plot(pol$geometry, col = "white", border = "black")
```

:::

## Creating geographic data frames from a CSV file

The following commands create a geographic data frame from a CSV file.
Note that separate steps are needed to grom a GeoSeries to a GeoDataFrame in Python, whereas in R the `sf::st_as_sf()` function can be used to convert a data frame to a spatial data frame directly.

::: {.panel-tabset group="language"}

## Python

```{python}
stops = pd.read_csv('data/gtfs/stops.txt')
stops = stops.drop(columns='stop_code')
geom = gpd.points_from_xy(stops['stop_lon'], stops['stop_lat'], crs=4326)
geom = gpd.GeoSeries(geom)
stops = gpd.GeoDataFrame(data=stops, geometry=geom)
stops = stops.drop(columns=['stop_lon', 'stop_lat'])
stops
```

## R

```{r}
stops = read_csv("data/gtfs/stops.txt") |>
  select(-stop_code) |>
  st_as_sf(coords = c("stop_lon", "stop_lat"), crs = 4326)
stops
```

:::

## Plotting attributes and layers



